/*
 ********************************************************************************
 Code for 'FanPid'.
 ------------------
 Generated automatically on Wed Mar 04 12:37:39 CET 2015.
 ESPecIaL version B3.0
 ********************************************************************************
 */

//*// Section 00
#include "analoginput.h"
#include "pulseinput.h"
#include "digitalinput.h"
#include "demo/pid.h"
#include "utils/delay.h"
#include "pwmoutput.h"
#include "digitaloutput.h"
//*// ----------

//*// Section 01
AnalogInput in_cmp08('B', 0, 8);	// OutputPort[0] 'out' of Cmp[08] 'AnalogInput'
PulseInput in_cmp07('B', 9);		// OutputPort[0] 'out' of Cmp[07] 'PulseInputCounter'
DigitalInput in_cmp14('C', 0);		// OutputPort[0] 'out' of Cmp[14] 'DigitalInput'
double rc = 0.0;
pid_t pid_cmp01;					// OutputPort[0] 'out' of Cmp[01] 'PID'
PwmOutput out_cmp12('B', 8);		// InputPort[0] 'in' of Cmp[12] 'PwmOutput'
DigitalOutput out_cmp16('C', 3);	// InputPort[0] 'in' of Cmp[16] 'DigitalOutput'
//*// ----------

//*// Section 02
uint16_t getlAnalogInputB0() {
    return in_cmp08.read(); // Start an A/D conversion and wait for the result
}
//*// ----------

//*// Section 03
void initOutputs() {
    out_cmp12.initialize();
    out_cmp16.initialize();
}

void init() {
    in_cmp08.initialize();
    in_cmp07.initialize();
    in_cmp14.initialize();
    pid_init(&pid_cmp01, 1.0, 0.5, 0.0, 50.0, 4000.0);
}
//*// ----------

int main() {
    initOutputs();
    init();

    //*// Section 04
    //*// ----------

    //*// Section 05
    while(1) {
        // 1) Read inputs
        uint16_t in_B0 = getlAnalogInputB0();
        uint32_t in_B9 = in_cmp07.get();
        bool in_C0 = in_cmp14.get();

        // 2) Loop logic

        // -- User input code of `SpeedGain`
        uint32_t timeDiff = time_diff_ms(time_get(), in_cmp07.lastPulseTimestamp);
        int32_t out_cmp09 = MAX(in_B9 , timeDiff);
        rc = rc * 0.5 + out_cmp09 * 0.5; // RC filter
        out_cmp09 = 180000.0 / rc;       // Speed gain

        delay_wait_ms(10);
        // --


        // -- User input code of `Not`
        uint8_t out_cmp11 = (in_C0 == 0) ? 1 : 0;
        // --

        pid_cmp01.state.setpoint = in_B0;
        uint16_t out_cmp01 = pid_step(&pid_cmp01, out_cmp09);
        uint8_t sel_cmp10 = out_cmp11;
        uint16_t out_cmp10;

        if(sel_cmp10 == 0)
            out_cmp10 = 50;
        else
            out_cmp10 = out_cmp01;

        // -- User input code of `Threshold`
        bool threshold_cmp15 = false;
        if(out_cmp10 > 2048)
            threshold_cmp15 = true;
        // --


        // 3) Update outputs
        out_cmp12.setPeriod(out_cmp10);
        out_cmp16.set(threshold_cmp15);
    }
    //*// ----------

    //*// Section 06
    //*// ----------

}
// END of file 'FanPid.cpp'